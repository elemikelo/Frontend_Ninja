// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$button-menu-name: 'button_menu';
$button-menu-x: 0px;
$button-menu-y: 0px;
$button-menu-offset-x: 0px;
$button-menu-offset-y: 0px;
$button-menu-width: 32px;
$button-menu-height: 32px;
$button-menu-total-width: 82px;
$button-menu-total-height: 64px;
$button-menu-image: 'img/sprite.png';
$button-menu: (0px, 0px, 0px, 0px, 32px, 32px, 82px, 64px, 'img/sprite.png', 'button_menu', );
$icon-comment-name: 'icon-comment';
$icon-comment-x: 64px;
$icon-comment-y: 18px;
$icon-comment-offset-x: -64px;
$icon-comment-offset-y: -18px;
$icon-comment-width: 16px;
$icon-comment-height: 16px;
$icon-comment-total-width: 82px;
$icon-comment-total-height: 64px;
$icon-comment-image: 'img/sprite.png';
$icon-comment: (64px, 18px, -64px, -18px, 16px, 16px, 82px, 64px, 'img/sprite.png', 'icon-comment', );
$icon-like-click-name: 'icon-like-click';
$icon-like-click-x: 32px;
$icon-like-click-y: 32px;
$icon-like-click-offset-x: -32px;
$icon-like-click-offset-y: -32px;
$icon-like-click-width: 18px;
$icon-like-click-height: 18px;
$icon-like-click-total-width: 82px;
$icon-like-click-total-height: 64px;
$icon-like-click-image: 'img/sprite.png';
$icon-like-click: (32px, 32px, -32px, -32px, 18px, 18px, 82px, 64px, 'img/sprite.png', 'icon-like-click', );
$icon-like-name: 'icon-like';
$icon-like-x: 64px;
$icon-like-y: 34px;
$icon-like-offset-x: -64px;
$icon-like-offset-y: -34px;
$icon-like-width: 16px;
$icon-like-height: 16px;
$icon-like-total-width: 82px;
$icon-like-total-height: 64px;
$icon-like-image: 'img/sprite.png';
$icon-like: (64px, 34px, -64px, -34px, 16px, 16px, 82px, 64px, 'img/sprite.png', 'icon-like', );
$icon-user-name: 'icon-user';
$icon-user-x: 64px;
$icon-user-y: 0px;
$icon-user-offset-x: -64px;
$icon-user-offset-y: 0px;
$icon-user-width: 18px;
$icon-user-height: 18px;
$icon-user-total-width: 82px;
$icon-user-total-height: 64px;
$icon-user-image: 'img/sprite.png';
$icon-user: (64px, 0px, -64px, 0px, 18px, 18px, 82px, 64px, 'img/sprite.png', 'icon-user', );
$next-name: 'next';
$next-x: 32px;
$next-y: 0px;
$next-offset-x: -32px;
$next-offset-y: 0px;
$next-width: 32px;
$next-height: 32px;
$next-total-width: 82px;
$next-total-height: 64px;
$next-image: 'img/sprite.png';
$next: (32px, 0px, -32px, 0px, 32px, 32px, 82px, 64px, 'img/sprite.png', 'next', );
$previous-name: 'previous';
$previous-x: 0px;
$previous-y: 32px;
$previous-offset-x: 0px;
$previous-offset-y: -32px;
$previous-width: 32px;
$previous-height: 32px;
$previous-total-width: 82px;
$previous-total-height: 64px;
$previous-image: 'img/sprite.png';
$previous: (0px, 32px, 0px, -32px, 32px, 32px, 82px, 64px, 'img/sprite.png', 'previous', );
$spritesheet-width: 82px;
$spritesheet-height: 64px;
$spritesheet-image: 'img/sprite.png';
$spritesheet-sprites: ($button-menu, $icon-comment, $icon-like-click, $icon-like, $icon-user, $next, $previous, );
$spritesheet: (82px, 64px, 'img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
